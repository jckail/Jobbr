"""initial migration

Revision ID: 7200056c6f47
Revises: 
Create Date: 2024-05-05 19:00:54.905587

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel 


from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '7200056c6f47'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('ai_context',
    sa.Column('id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('app_ai_id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('specified_context_ids', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('context_ids', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('extra_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('created_at_utc', sa.Integer(), nullable=False),
    sa.Column('updated_at_utc', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('ai_context_item',
    sa.Column('id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('context_owner_id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('source_name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('source_type', sa.Enum('FILE', 'OBJECT', name='sourcetype'), nullable=False),
    sa.Column('source_owner_id', sqlmodel.sql.sqltypes.GUID(), nullable=True),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('alias', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('estimated_tokens', sa.Integer(), nullable=True),
    sa.Column('authorized_users', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('extra_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('created_at_utc', sa.Integer(), nullable=False),
    sa.Column('updated_at_utc', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('aifunctionresult',
    sa.Column('input_model', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('tokenCount', sa.Integer(), nullable=False),
    sa.Column('function', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('tries', sa.Integer(), nullable=False),
    sa.Column('file_source', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('url', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('run_start_utc', sa.Integer(), nullable=False),
    sa.Column('id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('AIFunctionRun_id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('success', sa.Boolean(), nullable=False),
    sa.Column('message', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('model', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('response_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('stop_reason', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('stop_sequence', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('input_tokens', sa.Integer(), nullable=True),
    sa.Column('output_tokens', sa.Integer(), nullable=True),
    sa.Column('parsing_error', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('run_completion_utc', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('created_at_utc', sa.Integer(), nullable=False),
    sa.Column('updated_at_utc', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('aifunctionrun',
    sa.Column('input_model', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('tokenCount', sa.Integer(), nullable=False),
    sa.Column('function', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('tries', sa.Integer(), nullable=False),
    sa.Column('file_source', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('url', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('run_start_utc', sa.Integer(), nullable=False),
    sa.Column('id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('created_at_utc', sa.Integer(), nullable=False),
    sa.Column('updated_at_utc', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('app_ai',
    sa.Column('model', sa.Enum('GPT3', 'GPT4', 'CLAUD3_OPUS', name='llm'), nullable=False),
    sa.Column('temperature', sa.Float(), nullable=False),
    sa.Column('user_id', sqlmodel.sql.sqltypes.GUID(), nullable=True),
    sa.Column('ai_context_id', sqlmodel.sql.sqltypes.GUID(), nullable=True),
    sa.Column('id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('max_tokens', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('created_at_utc', sa.Integer(), nullable=False),
    sa.Column('updated_at_utc', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('app_ai_event',
    sa.Column('id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('app_ai_id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('model', sa.Enum('GPT3', 'GPT4', 'CLAUD3_OPUS', name='llm'), nullable=False),
    sa.Column('temperature', sa.Float(), nullable=False),
    sa.Column('event_type', sa.Enum('CREATE', 'CHAT', 'FUNCTION', 'KILL', 'CONTEXT', name='aieventtype'), nullable=False),
    sa.Column('event', sa.Enum('CREATE_AI', 'PARSE_ROLE_HTML', 'LOAD_CONTEXT', 'GENERATE_PROMPT', name='aievent'), nullable=False),
    sa.Column('event_status', sa.Enum('STARTED', 'RUNNING', 'FAILED', 'COMPLETED', name='aieventstatus'), nullable=False),
    sa.Column('event_utc', sa.Integer(), nullable=False),
    sa.Column('estimated_tokens', sa.Integer(), nullable=True),
    sa.Column('file_source', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('url', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('messages', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('user_id', sqlmodel.sql.sqltypes.GUID(), nullable=True),
    sa.Column('user_event_id', sqlmodel.sql.sqltypes.GUID(), nullable=True),
    sa.Column('function_start_utc', sa.Integer(), nullable=True),
    sa.Column('response_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('stop_reason', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('stop_sequence', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('input_tokens', sa.Integer(), nullable=True),
    sa.Column('output_tokens', sa.Integer(), nullable=True),
    sa.Column('parsing_error', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('created_at_utc', sa.Integer(), nullable=False),
    sa.Column('updated_at_utc', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('band',
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('genre', sa.Enum('ROCK', 'ELECTRONIC', 'METAL', 'HIP_HOP', name='genreurlchoices'), nullable=False),
    sa.Column('id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('date_formed', sa.Date(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('created_at_utc', sa.Integer(), nullable=False),
    sa.Column('updated_at_utc', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('stg_role',
    sa.Column('company_name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('title', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('job_category', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('posting_date', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('employment_type', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('employment_term_days', sa.Integer(), nullable=True),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('team', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('team_description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('expectations', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('location', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('remote', sa.Boolean(), nullable=True),
    sa.Column('in_person', sa.Boolean(), nullable=True),
    sa.Column('travel', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('responsibilities', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('qualifications', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('soft_skills', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('tool_experience', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('programming_languages', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('technical_skills', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('certifications', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('years_of_experience', sa.Integer(), nullable=True),
    sa.Column('prior_experience_description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('individual_contributor', sa.Boolean(), nullable=True),
    sa.Column('people_manager', sa.Boolean(), nullable=True),
    sa.Column('estimated_career_level', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('education_requirement', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('compensation_type', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('estimated_min_compensation', sa.Integer(), nullable=True),
    sa.Column('estimated_max_compensation', sa.Integer(), nullable=True),
    sa.Column('compensation_description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('unlimited_pto', sa.Boolean(), nullable=True),
    sa.Column('pto_and_benefits', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('role_quirks', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('ai_analysis', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('estimated_status', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('external_links', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('industry', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('job_identifier', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('offers_401k', sa.Boolean(), nullable=True),
    sa.Column('id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('app_ai_id', sqlmodel.sql.sqltypes.GUID(), nullable=True),
    sa.Column('app_ai_event_id', sqlmodel.sql.sqltypes.GUID(), nullable=True),
    sa.Column('specified_context_ids', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('context_id', sqlmodel.sql.sqltypes.GUID(), nullable=True),
    sa.Column('extra_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('url_id', sqlmodel.sql.sqltypes.GUID(), nullable=True),
    sa.Column('url', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('created_at_utc', sa.Integer(), nullable=False),
    sa.Column('updated_at_utc', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('url',
    sa.Column('url', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('type', sa.Enum('ROLE', 'ROLEHUB', name='urltype'), nullable=False),
    sa.Column('directory', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('snapshotPath', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('snapshot_len', sa.Integer(), nullable=True),
    sa.Column('htmlPath', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('html_len', sa.Integer(), nullable=True),
    sa.Column('parseTextPath', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('parseText_len', sa.Integer(), nullable=True),
    sa.Column('parseVisibleTextPath', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('parseVisible_len', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('created_at_utc', sa.Integer(), nullable=False),
    sa.Column('updated_at_utc', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('user',
    sa.Column('username', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('email', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('full_name', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('disabled', sa.Boolean(), nullable=True),
    sa.Column('id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('hashed_password', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('created_at_utc', sa.Integer(), nullable=False),
    sa.Column('updated_at_utc', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('album',
    sa.Column('title', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('release_date', sa.Date(), nullable=False),
    sa.Column('band_id', sqlmodel.sql.sqltypes.GUID(), nullable=True),
    sa.Column('id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('created_at_utc', sa.Integer(), nullable=False),
    sa.Column('updated_at_utc', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['band_id'], ['band.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('album')
    op.drop_table('user')
    op.drop_table('url')
    op.drop_table('stg_role')
    op.drop_table('band')
    op.drop_table('app_ai_event')
    op.drop_table('app_ai')
    op.drop_table('aifunctionrun')
    op.drop_table('aifunctionresult')
    op.drop_table('ai_context_item')
    op.drop_table('ai_context')
    # ### end Alembic commands ###
